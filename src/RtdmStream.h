/*****************************************************************************
 *  COPYRIGHT   : (c) 2016 Bombardier Transportation BTPC
 *****************************************************************************
 *
 *  MODULE      : RTDM_Stream.h
 *
 *  ABSTRACT    : Interface definition for resource 'RTDM_Stream'
 *
 *  CREATOR     : PMAKE 5.5.0.4
 *
 *  REMARKS     : ANY CHANGES TO THIS FILE WILL BE LOST !!!
 *
 ****************************************************************************/

#ifndef RTDM_STREAM_H
#define RTDM_STREAM_H

#ifdef TEST_ON_PC
#include "MyTypes.h"
#include "mwt_types.h"
#include "usertypes.h"
#endif

#ifndef TARGET_SIM_DLL
#include "mwt_types.h"
#include "usertypes.h"
#endif

typedef enum
{
    UINT8_XML_TYPE, INT8_XML_TYPE, UINT16_XML_TYPE, INT16_XML_TYPE, UINT32_XML_TYPE, INT32_XML_TYPE,
} XmlSignalType;

/* DAS FYI Autogenerated from MTPE */
typedef struct dataBlock_RTDM_Stream
{

    /* Group: INPUTS */ /* DAS FYI coming from MTPE */
    DS_8805001 oPCU_I1; /* input ECN Output 880500100 */
    MWT_UINT RTCTimeAccuracy; /* input  */
    MWT_STRING VNC_CarData_X_ConsistID; /* input Consist ID */
    MWT_STRING VNC_CarData_X_CarID; /* input Car ID */
    MWT_STRING VNC_CarData_X_DeviceID; /* input Device ID */
    MWT_BOOL VNC_CarData_S_WhoAmISts; /* input Who Am I Status */
    UINT8 RTDMDataLogStop; /* input Stop the RTDM Data Log */
    /* Group: OUTPUTS */ /* DAS FYI going to MTPE */
    UINT8 RTDMDataLogState; /* output State of RTDM Data Log, RUN, STOP, RESTART, FULL */
    UINT16 RTDMMainBuffCount; /* output MD data stream message */
    UINT32 RTDM_Send_Counter; /* output counter for number of messages sent */
    BOOL RTDMSendMessage_trig; /* output trigger to send MD data stream */
    UINT16 RTDMSignalCount; /* output number of signals read from config.xml */
    UINT16 RTDMSampleSize; /* output size of the current sample */
    UINT16 RTDMMainBuffSize; /* output Main buffer size [n] */
    UINT16 RTDMSendTime; /* output Max time before sending stream */
    UINT16 RTDMStreamError; /* output Error Code for Stream */
    UINT16 RTDMSampleCount; /* output Number of samples in stream */
} TYPE_RTDM_STREAM_IF;

typedef struct
{
    UINT16 id;
    void *variableAddr;
    XmlSignalType signalType;
} SignalDescription;

/* Structure to contain all variables read from RTDM_config.xml file */
typedef struct
{
    int16_t DataRecorderCfgID;
    int16_t DataRecorderCfgVersion;
    uint16_t SamplingRate; /*Not currently used - fixed at 50mS */
    uint8_t Compression_enabled;
    uint16_t MinRecordingRate;
    uint8_t DataLogFileCfg_enabled;
    uint16_t FilesCount;
    uint16_t NumberSamplesInFile;
    uint8_t FilesFullPolicy;
    uint16_t NumberSamplesBeforeSave;
    uint16_t MaxTimeBeforeSaveMs; /* max time between stream samples if data hasn't changed */
    uint8_t OutputStream_enabled;
    uint32_t comId;
    uint16_t bufferSize;
    uint16_t maxTimeBeforeSendMs;
    SignalDescription *signalDesription; /* allocated at runtime based on the number of signals discovered */
    uint16_t dataAllocationSize;
    int16_t sample_size; /* calculated size of sample including the sample header */
    uint16_t max_main_buffer_count; /* calculated size of main buffer (max number of samples) */
    uint16_t signal_count; /* number of signals */
} RtdmXmlStr;

typedef struct
{
    UINT32 seconds;
    UINT32 nanoseconds;

} RTDMTimeStr;

#ifdef __cplusplus
extern "C"
{
#endif

void InitializeRtdmStream (RtdmXmlStr *rtdmXmlData);
void RTDM_Stream (TYPE_RTDM_STREAM_IF *interface, RtdmXmlStr *rtdmXmlData);
int GetEpochTime (RTDMTimeStr* currentTime);

#ifdef __cplusplus
}
#endif

#endif /* RTDM_STREAM_H */

